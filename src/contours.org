#+SETUPFILE setup.org

* Namespace: thi.ng.ndarray.contours

** Level crossings

This section contains high level operations to find level crossings in
1D, 2D and 3D ndarrays. The functions all take an ndarray and contour
level value and assume the array to be in major shape order (the
default order), i.e. in 2D row-major (YX), in 3D slice-row-major
(ZYX). The functions return interpolated grid positions where the
given contour level is crossed between cells.

*** Examples

#+BEGIN_SRC clojure
  (level-crossings1d (nd/ndarray :float32 [0 0 1 0]) 4 0.25)
  ;; (1.25 2.75)

  (let [a [0 0 0
           0 1 0
           0 0 0]
        a (nd/ndarray :float32 a [3 3])]
    {:x   (level-crossings2d-x a 0.25)
     :y   (level-crossings2d-y a 0.25)
     :all (level-crossings2d a 0.25)})
  ;; {:x ([1 0.25] [1 1.75])
  ;;  :y ([0.25 1] [1.75 1])
  ;;  :all ([1 0.25] [1 1.75] [0.25 1] [1.75 1])}

  (let [a (nd/ndarray :float32 (float-array 27) [3 3 3])]
    (nd/set-at a 1 1 1 1)
    {:x (level-crossings3d-x a 0.25)
     :y (level-crossings3d-y a 0.25)
     :z (level-crossings3d-z a 0.25)
     :all (level-crossings3d a 0.25)})
  ;; {:x ((1 1 0.25) (1 1 1.75))
  ;;  :y ((1 0.25 1) (1 1.75 1))
  ;;  :z ([0.25 1 1] [1.75 1 1])
  ;;  :all ((1 1 0.25) (1 1 1.75) (1 0.25 1) (1 1.75 1) [0.25 1 1] [1.75 1 1])}
#+END_SRC

*** Implementation

#+BEGIN_SRC clojure :noweb-ref level-crossings
  (defn level-crossing
    [offset a b level]
    (let [da (- a level)
          db (- b level)]
      (if-not (= (>= da 0.0) (>= db 0.0))
        (+ offset (+ 0.5 (* 0.5 (/ (+ da db) (- da db))))))))

  (defn level-crossings1d
    [mat shape level]
    (for [x (range (dec (if (number? shape) shape (first shape))))
          :let [x' (level-crossing x (nd/get-at mat x) (nd/get-at mat (inc x)) level)]
          :when x']
      x'))

  (defn level-crossings2d-x
    ([mat level]
     (level-crossings2d-x mat (nd/shape mat) level))
    ([mat [sy sx] level]
     (mapcat
      (fn [y] (map #(vector y %) (level-crossings1d (nd/pick mat y nil) sx level)))
      (range sy))))

  (defn level-crossings2d-y
    ([mat level]
     (level-crossings2d-y mat (nd/shape mat) level))
    ([mat [sy sx] level]
     (mapcat
      (fn [x] (map #(vector % x) (level-crossings1d (nd/pick mat nil x) sy level)))
      (range sx))))

  (defn level-crossings2d
    ([mat level]
     (level-crossings2d mat (nd/shape mat) level))
    ([mat shape level]
     (concat
      (level-crossings2d-x mat shape level)
      (level-crossings2d-y mat shape level))))

  (defn level-crossings3d-x
    ([mat level]
     (level-crossings3d-x mat (nd/shape mat) level))
    ([mat [sz sy sx] level]
     (mapcat
      (fn [z] (map #(cons z %) (level-crossings2d-x (nd/pick mat z nil nil) [sy sx] level)))
      (range sz))))

  (defn level-crossings3d-y
    ([mat level]
     (level-crossings3d-y mat (nd/shape mat) level))
    ([mat [sz sy sx] level]
     (mapcat
      (fn [z] (map #(cons z %) (level-crossings2d-y (nd/pick mat z nil nil) [sy sx] level)))
      (range sz))))

  (defn level-crossings3d-z
    ([mat level]
     (level-crossings3d-z mat (nd/shape mat) level))
    ([mat [sz sy sx] level]
     (mapcat
      (fn [x] (map #(conj % x) (level-crossings2d-y (nd/pick mat nil nil x) [sz sy] level)))
      (range sx))))

  (defn level-crossings3d
    ([mat level]
     (level-crossings3d mat (nd/shape mat) level))
    ([mat shape level]
     (concat
      (level-crossings3d-x mat shape level)
      (level-crossings3d-y mat shape level)
      (level-crossings3d-z mat shape level))))
#+END_SRC

** Triangulation

#+BEGIN_SRC clojure :noweb-ref triangulate
  (def triangulation-perms
   [[[0]] [[0 1]] [[3 2 0] [0 1 3]]])
#+END_SRC

** Contour extraction

#+BEGIN_SRC clojure :noweb-ref 

#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/ndarray/contours.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.ndarray.contours
    (:require
     [thi.ng.typedarrays.core :as a]))

  <<level-crossings>>
#+END_SRC
