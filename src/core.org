#+SETUPFILE: setup.org

* Contents                                                         :toc_3_gh:
 - [[#namespace-thingndarraycore][Namespace: thi.ng.ndarray.core]]
     - [[#protocol-public-api-core-operations][Protocol (Public API core operations)]]
     - [[#constructors][Constructors]]
         - [[#supported-type-ids][Supported type IDs]]
         - [[#implementations][Implementations]]
     - [[#ndarray-generator-macro--registry][NDArray generator macro & registry]]
     - [[#helper-functions][Helper functions]]
     - [[#complete-namespace-definitions][Complete namespace definitions]]

* Namespace: thi.ng.ndarray.core

This library defines a datatype providing n-dimensional views over 1D
arrays and a number of operations to work with these views
efficiently. Optimized =NDArray= types are provided for 1-4 dimensions
and for all Java primitive array types (or in ClojureScript using JS
typed arrays via the [[http://thi.ng/typedarrays][thi.ng/typedarrays]] library). Furthermore, generic
(non-typehinted) implementations are available for each dimension too.

** Protocol (Public API core operations)

In addition to the protocol based API below, the NDArray views also
implement Clojure's =ISeqable= interface/protocol and can therefore be
directly used with the usual sequence processing fns (=map=, =reduce=,
=take= etc.)

See [[./index.org][index.org]] for further usage example of some of these operations...

#+BEGIN_SRC clojure :noweb-ref api
  (defprotocol PNDArray
    (data [_]
      "Returns the backing data array.")
    (data-type [_]
      "Returns the ndarray's type id (keyword).")
    (dimension [_]
      "Returns the ndarray's dimension.")
    (shape [_]
      "Returns a vector of the ndarray's sizes in each dimension.")
    (stride [_]
      "Returns a vector of the ndarray's strides in each dimension.")
    (offset [_]
      "Returns the ndarray view's start index in the backing data array")
    (size [_]
      "Returns the element count of an ndarray view")
    (extract [_]
      "Creates a new backing array of only values in given ndarray view
      and returns new ndarray of same shape, but with strides reset to
      defaults order.")
    (index-at [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns the global index into the backing array for given
      position in an ndarray view.")
    (index-pos [_ i]
      "Computes relative position in an ndarray view from given absolute
      array index.")
    (index-seq [_]
      "Returns a lazy seq of all array indices in an ndarray view.")
    (position-seq [_]
      "Returns a lazy seq of all position vectors in an ndarray view.")
    (get-at [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns value at given position in an ndarray view (without bounds check,
      assumes position is safe).")
    (get-at-safe [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns value at given position in an ndarray view (with bounds
      check)")
    (get-at-index [_ i]
      "Returns value at given global index in an ndarray view's backing
      array.")
    (set-at [_ x v] [_ x y v] [_ x y z v] [_ x y z w v]
      "Sets backing data array at given position in an ndarray view to
      new value v (without bounds check). Returns same NDArray instance.")
    (set-at-safe [_ x v] [_ x y v] [_ x y z v] [_ x y z w v]
      "Sets backing array at given position in an ndarray view to
      new value v (with bounds check). Returns same NDArray instance.")
    (set-at-index [_ i v]
      "Sets backing data array at given global index to new value
      v (without bounds check). Returns same NDArray instance.")
    (update-at [_ x f] [_ x y f] [_ x y z f] [_ x y z w f]
      "Applies function f to given position in an ndarray view and sets
      backing array at same position to the return value of f. The
      function f itself accepts m args: first the n coordinates of the
      position and the value at this position")
    (update-at-safe [_ x f] [_ x y f] [_ x y z f] [_ x y z w f]
      "Same as `update-at` but with bounds check.")
    (update-at-index [_ i f]
      "Applies function f to given global index in an ndarray's view
      backing array and sets it to the return value of f. The
      function f itself accepts 2 args: the supplied array index
      and the array's value at this index")
    (truncate-h [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns a new ndarray of same type with its shape truncated at
      top end. Negative args are considered offsets from current shape.
      nil values keep shape in that dimension. Does not mutate backing
      array.")
    (truncate-l [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns a new ndarray of same type with its shape truncated at
      lower end, effectively shifting its start index/offset towards the
      center of the view. Does not mutate backing array.")
    (transpose [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns a new ndarray view with stride order/axes swapped as per
      given vector. Does not mutate backing array.")
    (step [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns new ndarray view with stride steps/direction changed as
      per given vector. Values >1 result in skipping of items in that
      dimension, negative value flip direction, `nil` keeps current
      stride for that dimension. Does not mutate backing array.")
    (pick [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Generalized getter. Accepts n args (e.g. 3 for a 3D ndarray),
      each selecting a dimension slice (nil skips a dimension). Returns
      new ndarray view of selection, or if selecting in all dimensions,
      returns array value at that point. Does not mutate backing array."))
#+END_SRC

** Constructors

NDArrays can be created via the =ndarray= function, which accepts the
following arguments:

- =type= - a keyword to choose a typed implementation
- =data= - a pre-existing data array or Clojure sequence
- =shape= - a vector of =n= elements defining the shape of the data in each dimension

*Note:* When supplying an array, make sure it's of the same type as
the requested NDArray type id or else will cause casting errors when
attempting to set array values.

#+BEGIN_SRC clojure
  ;; example = 3D array of 16 x 16 x 4 items
  (nd/ndarray :float32 (float-array 1024) [16 16 4])

  ;; or
  (nd/ndarray :float32 (repeat 1024 0) [16 16 4])
#+END_SRC

*** Supported type IDs

The table below lists all currently supported type IDs and their
availability in Clojure & Clojurescript.

| *ID*             | *CLJ?* | *CLJS?* | *Description*                          |
|------------------+--------+---------+----------------------------------------|
| =:generic=       | ✓      | ✓       | untyped generic backing array          |
| =:int8=          | ✓      | ✓       | signed byte                            |
| =:uint8=         |        | ✓       | unsigned byte                          |
| =:uint8-clamped= |        | ✓       | unsigned byte (clamped to 0x00 - 0xff) |
| =:int16=         | ✓      | ✓       | signed short                           |
| =:uint16=        |        | ✓       | unsigned short                         |
| =:int32=         | ✓      | ✓       | signed int                             |
| =:uint32=        | ✓      | ✓       | unsigned int                           |
| =:int64=         | ✓      |         | signed long                            |
| =:float32=       | ✓      | ✓       | float                                  |
| =:float64=       | ✓      | ✓       | double                                 |

*** Implementations

#+BEGIN_SRC clojure :noweb-ref ctors
  (def ctor-registry (atom {}))

  #?(:clj
     (do
       (def-ndarray 1 nil     nil        :generic to-array aget aset true)
       (def-ndarray 1 boolean "booleans" :boolean boolean-array aget aset true)
       (def-ndarray 1 byte    "bytes"    :int8    byte-array aget aset true)
       (def-ndarray 1 short   "shorts"   :int16   short-array aget aset true)
       (def-ndarray 1 int     "ints"     :int32   int-array aget aset true)
       (def-ndarray 1 long    "longs"    :int64   long-array aget aset true)
       (def-ndarray 1 float   "floats"   :float32 float-array aget aset true)
       (def-ndarray 1 double  "doubles"  :float64 double-array aget aset true)

       (def-ndarray 2 nil     nil        :generic to-array aget aset true)
       (def-ndarray 2 boolean "booleans" :boolean boolean-array aget aset true)
       (def-ndarray 2 byte    "bytes"    :int8    byte-array aget aset true)
       (def-ndarray 2 short   "shorts"   :int16   short-array aget aset true)
       (def-ndarray 2 int     "ints"     :int32   int-array aget aset true)
       (def-ndarray 2 long    "longs"    :int64   long-array aget aset true)
       (def-ndarray 2 float   "floats"   :float32 float-array aget aset true)
       (def-ndarray 2 double  "doubles"  :float64 double-array aget aset true)

       (def-ndarray 3 nil     nil        :generic to-array aget aset true)
       (def-ndarray 3 boolean "booleans" :boolean boolean-array aget aset true)
       (def-ndarray 3 byte    "bytes"    :int8    byte-array aget aset true)
       (def-ndarray 3 short   "shorts"   :int16   short-array aget aset true)
       (def-ndarray 3 int     "ints"     :int32   int-array aget aset true)
       (def-ndarray 3 long    "longs"    :int64   long-array aget aset true)
       (def-ndarray 3 float   "floats"   :float32 float-array aget aset true)
       (def-ndarray 3 double  "doubles"  :float64 double-array aget aset true)

       (def-ndarray 4 nil     nil        :generic to-array aget aset true)
       (def-ndarray 4 boolean "booleans" :boolean boolean-array aget aset true)
       (def-ndarray 4 byte    "bytes"    :int8    byte-array aget aset true)
       (def-ndarray 4 short   "shorts"   :int16   short-array aget aset true)
       (def-ndarray 4 int     "ints"     :int32   int-array aget aset true)
       (def-ndarray 4 long    "longs"    :int64   long-array aget aset true)
       (def-ndarray 4 float   "floats"   :float32 float-array aget aset true)
       (def-ndarray 4 double  "doubles"  :float64 double-array aget aset true)
       )
     :cljs
     (do
       (def-ndarray 1 nil nil :generic to-array aget aset false)
       (def-ndarray 1 nil nil :uint8 a/uint8 aget aset false)
       (def-ndarray 1 nil nil :uint8-clamped a/uint8-clamped aget aset false)
       (def-ndarray 1 nil nil :uint16 a/uint16 aget aset false)
       (def-ndarray 1 nil nil :uint32 a/uint32 aget aset false)
       (def-ndarray 1 nil nil :int8 a/int8 aget aset false)
       (def-ndarray 1 nil nil :int16 a/int16 aget aset false)
       (def-ndarray 1 nil nil :int32 a/int32 aget aset false)
       (def-ndarray 1 nil nil :float32 a/float32 aget aset false)
       (def-ndarray 1 nil nil :float64 a/float64 aget aset false)

       (def-ndarray 2 nil nil :generic to-array aget aset false)
       (def-ndarray 2 nil nil :uint8 a/uint8 aget aset false)
       (def-ndarray 2 nil nil :uint8-clamped a/uint8-clamped aget aset false)
       (def-ndarray 2 nil nil :uint16 a/uint16 aget aset false)
       (def-ndarray 2 nil nil :uint32 a/uint32 aget aset false)
       (def-ndarray 2 nil nil :int8 a/int8 aget aset false)
       (def-ndarray 2 nil nil :int16 a/int16 aget aset false)
       (def-ndarray 2 nil nil :int32 a/int32 aget aset false)
       (def-ndarray 2 nil nil :float32 a/float32 aget aset false)
       (def-ndarray 2 nil nil :float64 a/float64 aget aset false)

       (def-ndarray 3 nil nil :generic to-array aget aset false)
       (def-ndarray 3 nil nil :uint8 a/uint8 aget aset false)
       (def-ndarray 3 nil nil :uint8-clamped a/uint8-clamped aget aset false)
       (def-ndarray 3 nil nil :uint16 a/uint16 aget aset false)
       (def-ndarray 3 nil nil :uint32 a/uint32 aget aset false)
       (def-ndarray 3 nil nil :int8 a/int8 aget aset false)
       (def-ndarray 3 nil nil :int16 a/int16 aget aset false)
       (def-ndarray 3 nil nil :int32 a/int32 aget aset false)
       (def-ndarray 3 nil nil :float32 a/float32 aget aset false)
       (def-ndarray 3 nil nil :float64 a/float64 aget aset false)

       (def-ndarray 4 nil nil :generic to-array aget aset false)
       (def-ndarray 4 nil nil :uint8 a/uint8 aget aset false)
       (def-ndarray 4 nil nil :uint8-clamped a/uint8-clamped aget aset false)
       (def-ndarray 4 nil nil :uint16 a/uint16 aget aset false)
       (def-ndarray 4 nil nil :uint32 a/uint32 aget aset false)
       (def-ndarray 4 nil nil :int8 a/int8 aget aset false)
       (def-ndarray 4 nil nil :int16 a/int16 aget aset false)
       (def-ndarray 4 nil nil :int32 a/int32 aget aset false)
       (def-ndarray 4 nil nil :float32 a/float32 aget aset false)
       (def-ndarray 4 nil nil :float64 a/float64 aget aset false)
       ))

  (defn ndarray
    ([type data]
     (ndarray type data [(count data)]))
    ([type data shape]
     (let [{:keys [ctor data-ctor]} (get-in @ctor-registry [(count shape) type])]
       (if ctor
         (ctor (if (sequential? data) (data-ctor data) data) 0 (shape->stride shape) shape)
         (throw (new #?(:clj IllegalArgumentException :cljs js/Error)
                     (str "Can't create ndarray for: " type " " data)))))))
#+END_SRC

** NDArray generator macro & registry

The NDArray types are all generated by the macro =def-ndarray= defined
in this section. Due to CLJS restrictions, this macro (and its helper
fns) is actually defined in its own namespace =thi.ng.ndarray.macro=,
but this namespace should be considered opaque for user applications
(only =ndarray.core= is required for userland apps).

For each generated =NDArray= type, the macro also produces a custom
factory function and registers it in the
=thi.ng.ndarray.core/ctor-registry= atom. This registry is used by the
public =ndarray= constructor fn to choose the correct type
implementation for the given arguments.

#+BEGIN_SRC clojure :noweb-ref macros
  (defn- type-hinted
    [type x] (if type (with-meta x {:tag (name type)}) x))

  (defn- make-symbols
    [id n] (mapv #(symbol (str id %)) (range n)))

  (defn- pair-fn
    [f coll]
    (let [coll (->> coll
                    (partition-all 2)
                    (map #(if (< 1 (count %)) (cons f %) (first %))))]
      (if (> (count coll) 2) (recur f coll) coll)))

  (defn- make-indexer
    [dim ->st p]
    `(int (+ ~@(->> (range dim)
                    (map #(list '* (->st %) `(int (~p ~%))))
                    (cons '_offset)
                    (pair-fn '+)))))

  (defn- make-indexer-syms
    [dim ->st ->p]
    `(int (+ ~@(->> (range dim)
                    (map #(list '* (->st %) `(int ~(->p %))))
                    (cons '_offset)
                    (pair-fn '+)))))

  (defmacro and*
    "Like clojure.core/and, but avoids intermediate let bindings and
    only ever returns either result of last form (if all previous
    succeeded) or nil."
    ([x] x)
    ([x & more] `(if ~x (and* ~@more))))

  (defn- with-bounds-check
    [dim psyms shapes clj? & body]
    `(if (and*
          ~@(mapcat
             #(let [p (symbol (psyms %))]
                (list `(>= ~p 0) `(< ~p ~(symbol (shapes %)))))
             (range dim)))
       (do ~@body)
       (throw
        (new ~(if clj? 'IndexOutOfBoundsException 'js/Error)
             (str "Invalid index: " (pr-str [~@psyms]))))))

  (defn- for*
    [->a ->sh rdim body]
    `(for [~@(mapcat #(vector (->a %) `(range ~(->sh %))) rdim)] ~body))

  (defn- reduce-init1
    [f acc ->p ->sh ->st get data rdim]
    (let [x  (->p 0)
          sx (->sh 0)
          st (->st 0)]
      `(let [sx# (dec ~sx)]
         (loop [~acc ~acc ~x 0 idx# ~'_offset]
           (if (reduced? ~acc)
             @~acc
             (let [~acc (~f ~acc (~get ~data idx#))]
               (if (< ~x sx#)
                 (recur ~acc (unchecked-inc-int ~x) (unchecked-add-int idx# ~st))
                 (if (reduced? ~acc) @~acc ~acc))))))))

  (defn- reduce-init2
    [f acc ->p ->sh ->st get data rdim]
    (let [[y x]     (map ->p rdim)
          [sy sx]   (map ->sh rdim)
          [sty stx] (map ->st rdim)]
      `(let [sy# (dec ~sy) sx# (dec ~sx)]
         (loop [~acc ~acc ~y 0 ~x 0 idx# ~'_offset]
           (if (reduced? ~acc)
             @~acc
             (let [~acc (~f ~acc (~get ~data idx#))]
               (if (< ~x sx#)
                 (recur ~acc ~y (unchecked-inc-int ~x) (unchecked-add-int idx# ~stx))
                 (if (< ~y sy#)
                   (recur ~acc (unchecked-inc-int ~y) 0 (+ ~'_offset (* ~sty (unchecked-inc-int ~y))))
                   (if (reduced? ~acc) @~acc ~acc)))))))))

  (defn- reduce-init3
    [f acc ->p ->sh ->st get data rdim]
    (let [[z y x]       (map ->p rdim)
          [sz sy sx]    (map ->sh rdim)
          [stz sty stx] (map ->st rdim)]
      `(let [sz# (dec ~sz) sy# (dec ~sy) sx# (dec ~sx)]
         (loop [~acc ~acc ~z 0 ~y 0 ~x 0 idx# ~'_offset]
           (if (reduced? ~acc)
             @~acc
             (let [~acc (~f ~acc (~get ~data idx#))]
               (if (< ~x sx#)
                 (recur ~acc ~z ~y (unchecked-inc-int ~x) (unchecked-add-int idx# ~stx))
                 (if (< ~y sy#)
                   (recur ~acc ~z (unchecked-inc-int ~y) 0 (+ ~'_offset (+ (* ~stz ~z) (* ~sty (unchecked-inc-int ~y)))))
                   (if (< ~z sz#)
                     (recur ~acc (unchecked-inc-int ~z) 0 0 (+ ~'_offset (* ~stz (unchecked-inc-int ~z))))
                     (if (reduced? ~acc) @~acc ~acc))))))))))

  (defn- reduce-init4
    [f acc ->p ->sh ->st get data rdim]
    (let [[w z y x]         (map ->p rdim)
          [sw sz sy sx]     (map ->sh rdim)
          [stw stz sty stx] (map ->st rdim)]
      `(let [sw# (dec ~sw) sz# (dec ~sz) sy# (dec ~sy) sx# (dec ~sx)]
         (loop [~acc ~acc ~w 0 ~z 0 ~y 0 ~x 0 idx# ~'_offset]
           (if (reduced? ~acc)
             @~acc
             (let [~acc (~f ~acc (~get ~data idx#))]
               (if (< ~x sx#)
                 (recur ~acc ~w ~z ~y (unchecked-inc-int ~x) (unchecked-add-int idx# ~stx))
                 (if (< ~y sy#)
                   (recur ~acc ~w ~z (unchecked-inc-int ~y) 0 (+ ~'_offset (+ (* ~stw ~w) (+ (* ~stz ~z) (* ~sty (unchecked-inc-int ~y))))))
                   (if (< ~z sz#)
                     (recur ~acc ~w (unchecked-inc-int ~z) 0 0 (+ ~'_offset (+ (* ~stw ~w) (* ~stz (unchecked-inc-int ~z)))))
                     (if (< ~w sw#)
                       (recur ~acc (unchecked-inc-int ~w) 0 0 0 (+ ~'_offset (* ~stw (unchecked-inc-int ~w))))
                       (if (reduced? ~acc) @~acc ~acc)))))))))))

  (def ^:private reduce-init-impls
    [nil reduce-init1 reduce-init2 reduce-init3 reduce-init4])

  (defn- inject-clj-protos
    [clj? get data ->a ->sh ->st idx rdim]
    (let [[f init] (repeatedly gensym)]
      (if clj?
        (list
         'clojure.lang.Seqable
         `(~'seq
           [_#]
           ~(for* ->a ->sh rdim `(~get ~data ~idx)))
         'clojure.core.protocols/InternalReduce
         `(~'internal-reduce
           [_# ~f ~init]
           ~((reduce-init-impls (count rdim)) f init ->a ->sh ->st get data rdim))
         'clojure.core.protocols/CollReduce
         `(~'coll-reduce
           [_# ~f ~init]
           ~((reduce-init-impls (count rdim)) f init ->a ->sh ->st get data rdim)))
        (list
         'ISeqable
         `(~'-seq
           [_#]
           ~(for* ->a ->sh rdim `(~get ~data ~idx)))))))

  (defn- do-cast
    [cast body]
    (if cast `(~cast ~body) body))

  (defmacro def-ndarray
    [dim cast type-hint type-id data-ctor get set & [clj?]]
    (let [type-name (symbol (str "NDArray" dim (name type-id)))
          raw-name  (symbol (str "make-raw-ndarray" dim "-" (name type-id)))
          strides   (make-symbols "_stride" dim)
          shapes    (make-symbols "_shape" dim)
          asyms     (make-symbols "a" dim)
          bsyms     (make-symbols "b" dim)
          psyms     (make-symbols "p" dim)
          [->st ->sh ->a ->b ->p] (map #(comp symbol %) [strides shapes asyms bsyms psyms])
          [c d f p o] (repeatedly gensym)
          idx       (make-indexer dim ->st p)
          idx-syms  (make-indexer-syms dim ->st ->p)
          data      (type-hinted type-hint '_data)
          rdim      (range dim)]
      `(do
         (deftype ~type-name
             [~data ~'_offset ~@strides ~@shapes]
           ~@(inject-clj-protos clj? get data ->a ->sh ->st (make-indexer-syms dim ->st ->a) rdim)
           ~'thi.ng.ndarray.core/PNDArray
           (~'data
             [_#] ~data)
           (~'data-type
             [_#] ~type-id)
           (~'dimension
             [_#] ~dim)
           (~'stride
             [_#] [~@strides])
           (~'shape
             [_#] [~@shapes])
           (~'offset
             [_#] ~'_offset)
           (~'size
             [_#] (* ~@(pair-fn '* shapes)))
           (~'extract
             [_#]
             (let [buf#      ~(type-hinted type-hint `(~data-ctor (* ~@(pair-fn '* shapes))))
                   [~@asyms] (thi.ng.ndarray.core/shape->stride [~@shapes])
                   arr#      (new ~type-name buf# 0 ~@asyms ~@shapes)]
               (loop [~c (thi.ng.ndarray.core/index-seq _#)
                      ~d (thi.ng.ndarray.core/index-seq arr#)]
                 (when ~c
                   (~set buf# (int (first ~d)) ~(do-cast cast `(~get ~data (int (first ~c)))))
                   (recur (next ~c) (next ~d))))
               arr#))
           (~'index-at
             [_# ~@psyms] ~idx-syms)
           (~'index-pos
             [_# ~p]
             (let [~p (int ~p)
                   ~c (- ~p ~'_offset)
                   ~@(drop-last
                      2 (mapcat
                         #(let [a (->a %) s (->st %)]
                            (list a `(int (/ ~c ~s))
                                  c `(- ~c (* ~a ~s))))
                         rdim))]
               [~@asyms]))
           (~'index-seq
             [_#]
             ~(let [idx (make-indexer-syms dim ->st ->a)]
                (for* ->a ->sh rdim idx)))
           (~'position-seq
             [_#] ~(for* ->a ->sh rdim `[~@asyms]))
           (~'get-at
             [_# ~@psyms] (~get ~data ~idx-syms))
           (~'get-at-safe
             [_# ~@psyms]
             ~(with-bounds-check dim psyms shapes clj?
                `(~get ~data ~idx-syms)))
           (~'get-at-index
             [_# i#] (~get ~data (int i#)))
           (~'set-at
             [_# ~@psyms ~c] (~set ~data ~idx-syms ~(do-cast cast c)) _#)
           (~'set-at-safe
             [_# ~@psyms ~c]
             ~(with-bounds-check dim psyms shapes clj?
                `(~set ~data ~idx-syms ~(do-cast cast c)))
             _#)
           (~'set-at-index
             [_# i# ~c] (~set ~data (int i#) ~(do-cast cast c)) _#)
           (~'update-at
             [_# ~@psyms ~f]
             (let [~c ~idx-syms]
               (~set ~data ~c ~(do-cast cast `(~f ~@psyms (~get ~data ~c)))))
             _#)
           (~'update-at-safe
             [_# ~@psyms ~f]
             ~(with-bounds-check dim psyms shapes clj?
                `(let [~c ~idx-syms]
                   (~set ~data ~c ~(do-cast cast `(~f ~@psyms (~get ~data ~c))))))
             _#)
           (~'update-at-index
             [_# ~c ~f] (~set ~data ~c ~(do-cast cast `(~f ~c (~get ~data (int ~c))))) _#)
           (~'truncate-h
             [_# ~@psyms]
             (new ~type-name ~data ~'_offset ~@strides
                  ~@(map
                     #(let [p (->p %) s (->sh %)]
                        `(if (number? ~p)
                           (if (neg? ~p)
                             (+ ~s (int ~p))
                             (int ~p))
                           ~s))
                     rdim)))
           (~'truncate-l
             [_# ~@psyms]
             (let [~@(mapcat
                      #(let [p (->p %) sh (->sh %) st (->st %)]
                         (list
                          [(->a %) (->b %)]
                          `(if (pos? ~p)
                             [(- ~sh (int ~p))
                              (* ~st (int ~p))]
                             [~sh 0])))
                      rdim)
                   ~o (+ ~@(->> rdim (map ->b) (cons '_offset) (pair-fn '+)))]
               (new ~type-name ~data ~o ~@strides ~@asyms)))
           (~'transpose
             [_# ~@psyms]
             (let [~@(mapcat #(let [p (->p %)] (list p `(if ~p (int ~p) ~%))) rdim)
                   ~c [~@strides]
                   ~d [~@shapes]]
               (new ~type-name ~data ~'_offset
                    ~@(map #(list c (->p %)) rdim)
                    ~@(map #(list d (->p %)) rdim))))
           (~'step
             [_# ~@psyms]
             (let [~o ~'_offset
                   ~@(mapcat
                      #(let [p (->p %) sh (->sh %) st (->st %)
                             stride' `(* ~st (int ~p))]
                         (list
                          [(->a %) (->b %) o]
                          `(if (number? ~p)
                             (if (neg? ~p)
                               [(int (~'Math/ceil (/ (- ~sh) (int ~p))))
                                ~stride'
                                (+ ~o (* ~st (dec ~sh)))]
                               [(int (~'Math/ceil (/ ~sh (int ~p))))
                                ~stride'
                                ~o])
                             [~sh ~st ~o])))
                      rdim)]
               (new ~type-name ~data ~o ~@bsyms ~@asyms)))
           (~'pick
             [_# ~@psyms]
             (let [~o ~'_offset, ~c [], ~d []
                   ~@(mapcat
                      #(let [p (->p %) sh (->sh %) st (->st %)]
                         (list
                          [c d o]
                          `(if (and (number? ~p) (>= ~p 0))
                             [~c ~d (+ ~o (* ~st (int ~p)))]
                             [(conj ~c ~sh) (conj ~d ~st) ~o])))
                      rdim)
                   cnt# (count ~c)]
               (if (pos? cnt#)
                 ((get-in @~'thi.ng.ndarray.core/ctor-registry [cnt# ~type-id :ctor]) ~data ~o ~d ~c)
                 (~get ~data (int ~o)))))
           ~'Object
           (~'toString
             [_#]
             (pr-str
              {:data ~data :type ~type-id
               :size (* ~@(pair-fn '* shapes)) :total (count (seq _#)) :offset ~'_offset
               :shape [~@shapes] :stride [~@strides]})))

         (defn ~(with-meta raw-name {:export true})
           [data# o# [~@strides] [~@shapes]]
           (new ~type-name data# o# ~@strides ~@shapes))

         (swap!
          ~'thi.ng.ndarray.core/ctor-registry
          assoc-in [~dim ~type-id]
          {:ctor ~raw-name
           :data-ctor ~data-ctor}))))
#+END_SRC

** Helper functions

#+BEGIN_SRC clojure :noweb-ref ops
  (defn order
    [coll] (->> coll (map vector (range)) (sort-by peek) (mapv first)))

  (defn shape->stride
    [shape]
    (->> shape
         reverse
         (reduce #(conj % (* %2 (first %))) '(1))
         (drop 1)
         (vec)))
#+END_SRC

** Complete namespace definitions

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/ndarray/core.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.ndarray.core
    #?(:cljs
       (:require-macros
	[thi.ng.math.macros :as mm]
	[thi.ng.ndarray.macros :refer [def-ndarray]]))
    (:require
     #?@(:clj
	 [[thi.ng.math.macros :as mm]
	  [thi.ng.ndarray.macros :refer [def-ndarray]]]
	 :cljs
	 [[thi.ng.typedarrays.core :as a]])
     [thi.ng.math.core :as m]))

  <<api>>

  <<ops>>

  <<ctors>>
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/ndarray/macros.clj :noweb yes :mkdirp yes :padline no
  (ns thi.ng.ndarray.macros)

  <<macros>>
#+END_SRC
