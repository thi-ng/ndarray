#+SETUPFILE: setup.org

* Contents                                                         :toc_3_gh:
 - [[#namespace-thingndarraycore][Namespace: thi.ng.ndarray.core]]
     - [[#protocol-public-api-core-operations][Protocol (Public API core operations)]]
     - [[#ndarray-generator-macro][NDArray generator macro]]
     - [[#constructors][Constructors]]
     - [[#helper-functions][Helper functions]]
     - [[#complete-namespace-definitions][Complete namespace definitions]]

* Namespace: thi.ng.ndarray.core

This library defines a datatype providing n-dimensional views over 1D
arrays and provides a number of operations to work with these views
efficiently.

** Protocol (Public API core operations)

#+BEGIN_SRC clojure :noweb-ref api
  (defprotocol PNDArray
    (data [_]
      "Returns the backing data array.")
    (data-type [_]
      "Returns the ndarray's type id (keyword).")
    (dimension [_]
      "Returns the ndarray's dimension.")
    (shape [_]
      "Returns a vector of the ndarray's sizes in each dimension.")
    (stride [_]
      "Returns a vector of the ndarray's strides in each dimension.")
    (offset [_]
      "Returns the ndarray view's start index in the backing data array")
    (index-at [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns the global index into the backing array for given
      position in an ndarray view.")
    (index-pos [_ i]
      "Computes relative position in an ndarray view from given absolute
      array index.")
    (index-seq [_]
      "Returns a lazy seq of all array indices in an ndarray view.")
    (position-seq [_]
      "Returns a lazy seq of all position vectors in an ndarray view.")
    (get-at [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns value at given position in an ndarray view (without bounds check,
      assumes position is safe).")
    (get-at-safe [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns value at given position in an ndarray view (with bounds
      check)")
    (get-at-index [_ i]
      "Returns value at given global index in an ndarray view's backing
      array.")
    (set-at [_ x v] [_ x y v] [_ x y z v] [_ x y z w v]
      "Sets backing data array at given position in an ndarray view to
      new value v (without bounds check). Returns same NDArray instance.")
    (set-at-safe [_ x v] [_ x y v] [_ x y z v] [_ x y z w v]
      "Sets backing array at given position in an ndarray view to
      new value v (with bounds check). Returns same NDArray instance.")
    (set-at-index [_ i v]
      "Sets backing data array at given global index to new value
      v (without bounds check). Returns same NDArray instance.")
    (update-at [_ x f] [_ x y f] [_ x y z f] [_ x y z w f]
      "Applies function f to given position in an ndarray view and sets
      backing array at same position to the return value of f. The
      function f itself accepts m args: first the n coordinates of the
      position and the value at this position")
    (update-at-safe [_ x f] [_ x y f] [_ x y z f] [_ x y z w f]
      "Same as `update-at` but with bounds check.")
    (update-at-index [_ i f]
      "Applies function f to given global index in an ndarray's view
      backing array and sets it to the return value of f. The
      function f itself accepts 2 args: the supplied array index
      and the array's value at this index")
    (truncate-h [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns a new ndarray of same type with its shape truncated at
      top end. Negative args are considered offsets from current shape.
      Does not mutate backing array.")
    (truncate-l [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns a new ndarray of same type with its shape truncated at
      lower end, effectively shifting its start index/offset towards the
      center of the view. Does not mutate backing array.")
    (transpose [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns a new ndarray view with stride order/axes swapped as per
      given vector. Does not mutate backing array.")
    (step [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Returns new ndarray view with stride steps/direction changed as
      per given vector. Values >1 result in skipping of items in that
      dimension, negative value flip direction, `nil` keeps current
      stride for that dimension. Does not mutate backing array.")
    (pick [_ x] [_ x y] [_ x y z] [_ x y z w]
      "Generalized getter. Accepts n args (e.g. 3 for a 3D ndarray),
      each selecting a dimension slice (nil skips a dimension). Returns
      new ndarray view of selection, or if selecting in all dimensions,
      returns array value at that point. Does not mutate backing array."))
#+END_SRC

** NDArray generator macro

#+BEGIN_SRC clojure :noweb-ref macros
  (defn- type-hinted
    [type x] (if type (with-meta x {:tag (name type)}) x))

  (defn- make-symbols
    [id n] (mapv #(symbol (str id %)) (range n)))

  (defn- pair-fn
    [f coll]
    (let [coll (->> coll
                    (partition-all 2)
                    (map #(if (< 1 (count %)) (cons f %) (first %))))]
      (if (> (count coll) 2) (recur f coll) coll)))

  (defn- make-indexer
    [dim ->st p]
    `(+ ~@(->> (range dim)
               (map #(list '* (->st %) `(int (~p ~%))))
               (cons '_offset)
               (pair-fn '+))))

  (defn- make-indexer-syms
    [dim ->st ->p]
    `(+ ~@(->> (range dim)
               (map #(list '* (->st %) `(int ~(->p %))))
               (cons '_offset)
               (pair-fn '+))))

  (defn- with-bounds-check
    [dim psyms shapes clj? & body]
    `(if (and
          ~@(mapcat
             #(list `(>= ~(symbol (psyms %)) 0)
                    `(< ~(symbol (psyms %)) ~(symbol (shapes %))))
             (range dim)))
       (do ~@body)
       (throw
        (new ~(if clj? 'IndexOutOfBoundsException 'js/Error)
             (str "Invalid index: " (pr-str [~@psyms]))))))

  (defn- inject-clj-protos
    [clj? get data ->a ->sh idx rdim]
    (if clj?
      (list
       'clojure.lang.Seqable
       `(~'seq
         [_#]
         (for [~@(mapcat #(vector (->a %) `(range ~(->sh %))) rdim)]
           (~get ~data ~idx))))
      (list
       'ISeqable
       `(~'-seq
         [_#]
         (for [~@(mapcat #(vector (->a %) `(range ~(->sh %))) rdim)]
           (~get ~data ~idx))))))

  (defn- do-cast
    [cast body]
    (if cast `(~cast ~body) body))

  (defmacro def-ndarray
    [dim cast type-hint type-id data-ctor get set & [clj?]]
    (let [type-name (symbol (str "NDArray" dim (name type-id)))
          raw-name  (symbol (str "make-raw-ndarray" dim "-" (name type-id)))
          strides   (make-symbols "_stride" dim)
          shapes    (make-symbols "_shape" dim)
          asyms     (make-symbols "a" dim)
          bsyms     (make-symbols "b" dim)
          psyms     (make-symbols "p" dim)
          [->st ->sh ->a ->b ->p] (map #(comp symbol %) [strides shapes asyms bsyms psyms])
          [c d f p o] (repeatedly gensym)
          idx       (make-indexer dim ->st p)
          idx-syms  (make-indexer-syms dim ->st ->p)
          data      (type-hinted type-hint '_data)
          rdim      (range dim)]
      `(do
         (deftype ~type-name
             [~data ~'_offset ~@strides ~@shapes]
           ~@(inject-clj-protos clj? get data ->a ->sh (make-indexer-syms dim ->st ->a) rdim)
           ~'PNDArray
           (~'data
             [_#] ~data)
           (~'data-type
             [_#] ~type-id)
           (~'dimension
             [_#] ~dim)
           (~'stride
             [_#] [~@strides])
           (~'shape
             [_#] [~@shapes])
           (~'offset
             [_#] ~'_offset)
           (~'index-at
             [_# ~@psyms] ~idx-syms)
           (~'index-pos
             [_# ~p]
             (let [~p (int ~p)
                   ~c (- ~p ~'_offset)
                   ~@(drop-last
                      2 (mapcat
                         #(list
                           (->a %) `(int (/ ~c ~(->st %)))
                           c `(- ~c (* ~(->a %) ~(->st %))))
                         rdim))]
               [~@asyms]))
           (~'index-seq
             [_#]
             (for [~@(mapcat #(vector (->a %) `(range ~(->sh %))) rdim)]
               ~(make-indexer-syms dim ->st ->a)))
           (~'position-seq
             [_#]
             (for [~@(mapcat #(vector (->a %) `(range ~(->sh %))) rdim)]
               [~@asyms]))
           (~'get-at
             [_# ~@psyms]
             (~get ~data ~idx-syms))
           (~'get-at-safe
             [_# ~@psyms]
             ~(with-bounds-check dim psyms shapes clj?
                `(~get ~data ~idx-syms)))
           (~'get-at-index
             [_# i#]
             (~get ~data (int i#)))
           (~'set-at
             [_# ~@psyms ~c]
             (~set ~data ~idx-syms ~(do-cast cast c)) _#)
           (~'set-at-safe
             [_# ~@psyms ~c]
             ~(with-bounds-check dim psyms shapes clj?
                `(~set ~data ~idx-syms ~(do-cast cast c)))
             _#)
           (~'set-at-index
             [_# i# ~c]
             (~set ~data (int i#) ~(do-cast cast c)) _#)
           (~'update-at
             [_# ~@psyms ~f]
             (let [~c ~idx-syms]
               (~set ~data ~c ~(do-cast cast `(~f ~@psyms (~get ~data ~c)))))
             _#)
           (~'update-at-safe
             [_# ~@psyms ~f]
             ~(with-bounds-check dim psyms shapes clj?
                `(let [~c ~idx-syms]
                   (~set ~data ~c ~(do-cast cast `(~f ~@psyms (~get ~data ~c))))))
             _#)
           (~'update-at-index
             [_# ~c ~f]
             (~set ~data ~c
                   ~(do-cast cast `(~f ~c (~get ~data ~c))))
             _#)
           (~'truncate-h
             [_# ~@psyms]
             (new ~type-name ~data ~'_offset ~@strides
                  ~@(map
                     #(list 'if `(neg? ~(->p %)) (->sh %) `(int ~(->p %)))
                     rdim)))
           (~'truncate-l
             [_# ~@psyms]
             (let [~@(mapcat
                      #(list
                        [(->a %) (->b %)]
                        `(if (pos? ~(->p %))
                           [(- ~(->sh %) (int ~(->p %)))
                            (* ~(->st %) (int ~(->p %)))]
                           [~(->sh %) 0]))
                      rdim)
                   ~o (+ ~@(->> rdim (map ->b) (cons '_offset) (pair-fn '+)))]
               (new ~type-name ~data ~o ~@strides ~@asyms)))
           (~'transpose
             [_# ~@psyms]
             (let [~@(mapcat #(list (->p %) `(if ~(->p %) (int ~(->p %)) ~%)) rdim)
                   ~c [~@strides]
                   ~d [~@shapes]]
               (new ~type-name ~data ~'_offset
                    ~@(map #(list c (->p %)) rdim)
                    ~@(map #(list d (->p %)) rdim))))
           (~'step
             [_# ~@psyms]
             (let [~o ~'_offset
                   ~@(mapcat
                      #(let [stride' `(* ~(->st %) (int ~(->p %)))]
                         (list
                          [(->a %) (->b %) o]
                          `(if (number? ~(->p %))
                             (if (neg? ~(->p %))
                               [~(list 'int (list 'Math/ceil `(/ (- ~(->sh %)) (int ~(->p %)))))
                                ~stride'
                                (+ ~o (* ~(->st %) (dec ~(->sh %))))]
                               [~(list 'int (list 'Math/ceil `(/ ~(->sh %) (int ~(->p %)))))
                                ~stride'
                                ~o])
                             [~(->sh %) ~(->st %) ~o])))
                      rdim)]
               (new ~type-name ~data ~o ~@bsyms ~@asyms)))
           (~'pick
             [_# ~@psyms]
             (let [~o ~'_offset, ~c [], ~d []
                   ~@(mapcat
                      #(list
                        [c d o]
                        `(if (and (number? ~(->p %)) (>= ~(->p %) 0))
                           [~c ~d (+ ~o (* ~(->st %) (int ~(->p %))))]
                           [(conj ~c ~(->sh %)) (conj ~d ~(->st %)) ~o]))
                      rdim)
                   cnt# (count ~c)]
               (if (pos? cnt#)
                 ((get-in @~'ctor-registry [cnt# ~type-id :ctor]) ~data ~o ~d ~c)
                 (~get ~data ~o))))
           ~'Object
           (~'toString
             [_#]
             (pr-str
              {:data ~data :type ~type-id
               :size (* ~@shapes) :total (count ~data) :offset ~'_offset
               :shape [~@shapes] :stride [~@strides]})))

         (defn ~(with-meta raw-name {:export true})
           [data# o# [~@strides] [~@shapes]]
           (new ~type-name data# o# ~@strides ~@shapes))

         (swap!
          ~'thi.ng.ndarray.core/ctor-registry
          assoc-in [~dim ~type-id]
          {:ctor ~raw-name
           :data-ctor ~data-ctor}))))
#+END_SRC

** Constructors

#+BEGIN_SRC clojure :noweb-ref ctors
  (def ctor-registry (atom {}))

  #?(:clj
     (do
       (def-ndarray 1 nil     nil        :generic to-array aget aset true)
       (def-ndarray 1 boolean "booleans" :boolean boolean-array aget aset-boolean true)
       (def-ndarray 1 byte    "bytes"    :int8    byte-array aget aset-byte true)
       (def-ndarray 1 short   "shorts"   :int16   short-array aget aset-short true)
       (def-ndarray 1 int     "ints"     :int32   int-array aget aset-int true)
       (def-ndarray 1 long    "longs"    :int64   long-array aget aset-long true)
       (def-ndarray 1 float   "floats"   :float32 float-array aget aset-float true)
       (def-ndarray 1 double  "doubles"  :float64 double-array aget aset-double true)

       (def-ndarray 2 nil     nil        :generic to-array aget aset true)
       (def-ndarray 2 boolean "booleans" :boolean boolean-array aget aset-boolean true)
       (def-ndarray 2 byte    "bytes"    :int8    byte-array aget aset-byte true)
       (def-ndarray 2 short   "shorts"   :int26   short-array aget aset-short true)
       (def-ndarray 2 int     "ints"     :int32   int-array aget aset-int true)
       (def-ndarray 2 long    "longs"    :int64   long-array aget aset-long true)
       (def-ndarray 2 float   "floats"   :float32 float-array aget aset-float true)
       (def-ndarray 2 double  "doubles"  :float64 double-array aget aset-double true)

       (def-ndarray 3 nil     nil        :generic to-array aget aset true)
       (def-ndarray 3 boolean "booleans" :boolean boolean-array aget aset-boolean true)
       (def-ndarray 3 byte    "bytes"    :int8    byte-array aget aset-byte true)
       (def-ndarray 3 short   "shorts"   :int36   short-array aget aset-short true)
       (def-ndarray 3 int     "ints"     :int32   int-array aget aset-int true)
       (def-ndarray 3 long    "longs"    :int64   long-array aget aset-long true)
       (def-ndarray 3 float   "floats"   :float32 float-array aget aset-float true)
       (def-ndarray 3 double  "doubles"  :float64 double-array aget aset-double true)

       (def-ndarray 4 nil     nil        :generic to-array aget aset true)
       (def-ndarray 4 boolean "booleans" :boolean boolean-array aget aset-boolean true)
       (def-ndarray 4 byte    "bytes"    :int8    byte-array aget aset-byte true)
       (def-ndarray 4 short   "shorts"   :int46   short-array aget aset-short true)
       (def-ndarray 4 int     "ints"     :int32   int-array aget aset-int true)
       (def-ndarray 4 long    "longs"    :int64   long-array aget aset-long true)
       (def-ndarray 4 float   "floats"   :float32 float-array aget aset-float true)
       (def-ndarray 4 double  "doubles"  :float64 double-array aget aset-double true)
       )
     :cljs
     (do
       (def-ndarray 1 nil nil :generic to-array aget aset false)
       (def-ndarray 1 nil nil :uint8 a/uint8 aget aset false)
       (def-ndarray 1 nil nil :uint8-clamped a/uint8-clamped aget aset false)
       (def-ndarray 1 nil nil :uint16 a/uint16 aget aset false)
       (def-ndarray 1 nil nil :uint32 a/uint32 aget aset false)
       (def-ndarray 1 nil nil :int8 a/int8 aget aset false)
       (def-ndarray 1 nil nil :int16 a/int16 aget aset false)
       (def-ndarray 1 nil nil :int32 a/int32 aget aset false)
       (def-ndarray 1 nil nil :float32 a/float32 aget aset false)
       (def-ndarray 1 nil nil :float64 a/float64 aget aset false)

       (def-ndarray 2 nil nil :generic to-array aget aset false)
       (def-ndarray 2 nil nil :uint8 a/uint8 aget aset false)
       (def-ndarray 2 nil nil :uint8-clamped a/uint8-clamped aget aset false)
       (def-ndarray 2 nil nil :uint16 a/uint16 aget aset false)
       (def-ndarray 2 nil nil :uint32 a/uint32 aget aset false)
       (def-ndarray 2 nil nil :int8 a/int8 aget aset false)
       (def-ndarray 2 nil nil :int16 a/int16 aget aset false)
       (def-ndarray 2 nil nil :int32 a/int32 aget aset false)
       (def-ndarray 2 nil nil :float32 a/float32 aget aset false)
       (def-ndarray 2 nil nil :float64 a/float64 aget aset false)

       (def-ndarray 3 nil nil :generic to-array aget aset false)
       (def-ndarray 3 nil nil :uint8 a/uint8 aget aset false)
       (def-ndarray 3 nil nil :uint8-clamped a/uint8-clamped aget aset false)
       (def-ndarray 3 nil nil :uint16 a/uint16 aget aset false)
       (def-ndarray 3 nil nil :uint32 a/uint32 aget aset false)
       (def-ndarray 3 nil nil :int8 a/int8 aget aset false)
       (def-ndarray 3 nil nil :int16 a/int16 aget aset false)
       (def-ndarray 3 nil nil :int32 a/int32 aget aset false)
       (def-ndarray 3 nil nil :float32 a/float32 aget aset false)
       (def-ndarray 3 nil nil :float64 a/float64 aget aset false)

       (def-ndarray 4 nil nil :generic to-array aget aset false)
       (def-ndarray 4 nil nil :uint8 a/uint8 aget aset false)
       (def-ndarray 4 nil nil :uint8-clamped a/uint8-clamped aget aset false)
       (def-ndarray 4 nil nil :uint16 a/uint16 aget aset false)
       (def-ndarray 4 nil nil :uint32 a/uint32 aget aset false)
       (def-ndarray 4 nil nil :int8 a/int8 aget aset false)
       (def-ndarray 4 nil nil :int16 a/int16 aget aset false)
       (def-ndarray 4 nil nil :int32 a/int32 aget aset false)
       (def-ndarray 4 nil nil :float32 a/float32 aget aset false)
       (def-ndarray 4 nil nil :float64 a/float64 aget aset false)
       ))

  (defn ndarray
    ([data shape]
     (ndarray ::generic data shape))
    ([type data shape]
     (let [{:keys [ctor data-ctor]} (get-in @ctor-registry [(count shape) type])]
       (if ctor
         (ctor (if (sequential? data) (data-ctor data) data) 0 (shape->stride shape) shape)
         (throw (new #?(:clj IllegalArgumentException :cljs js/Error)
                     (str "Can't create ndarray for: " type " " data)))))))
#+END_SRC

** Helper functions

#+BEGIN_SRC clojure :noweb-ref ops
  (defn order
    [coll] (->> coll (map vector (range)) (sort-by peek) (mapv first)))

  (defn shape->stride
    [shape]
    (->> shape
         reverse
         (reduce #(conj % (* %2 (first %))) '(1))
         (drop 1)
         (vec)))
#+END_SRC

** Complete namespace definitions

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/ndarray/core.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.ndarray.core
    #?@(:clj
        [(:require
          [thi.ng.ndarray.macros :refer [def-ndarray]])]
        :cljs
        [(:require-macros
          [thi.ng.ndarray.macros :refer [def-ndarray]])
         (:require
          [thi.ng.typedarrays.core :as a])]))

  <<api>>

  <<ops>>

  <<ctors>>
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/ndarray/macros.clj :noweb yes :mkdirp yes :padline no
  (ns thi.ng.ndarray.macros)

  <<macros>>
#+END_SRC
