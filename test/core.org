#+SETUPFILE: ../src/setup.org

* Contents                                                         :toc_4_gh:
 - [[#thingndarraytestcore][thi.ng.ndarray.test.core]]
     - [[#main-tests][Main tests]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* thi.ng.ndarray.test.core

** Main tests

#+BEGIN_SRC clojure :noweb-ref test
  (deftest test-3d
    (let [shape [3 3 3]
          raw   (range (apply * shape))
          a     (nd/ndarray :int8 raw shape)]
      (is (satisfies? nd/PNDArray a))
      #?(:cljs (is (a/typed-array? (nd/data a))))
      (is (= shape (nd/shape a)))
      (is (= [9 3 1] (nd/stride a)))
      (is (= raw (seq a)))
      (is (= [2 2 2] (-> a (nd/hi [2 2 2]) (nd/shape))))
      (is (= [0 1 3 4 9 10 12 13] (-> a (nd/hi [2 2 2]) (seq))))
      (is (= [2 2 2] (-> a (nd/lo [1 1 1]) (nd/shape))))
      (is (= [13 14 16 17 22 23 25 26] (-> a (nd/lo [1 1 1]) (seq))))
      (is (= [13] (-> a (nd/hi [2 2 2]) (nd/lo [1 1 1]) (seq))))
      (is (= [0 1 2 3 4 5 6 7 8 18 19 20 21 22 23 24 25 26] (-> a (nd/step [2 nil nil]) (seq))))
      (is (= [0 1 2 6 7 8 9 10 11 15 16 17 18 19 20 24 25 26] (-> a (nd/step [nil 2 nil]) (seq))))
      (is (= [0 2 3 5 6 8 9 11 12 14 15 17 18 20 21 23 24 26] (-> a (nd/step [nil nil 2]) (seq))))
      (is (= [9 11 12 14 15 17 18 20 21 23 24 26] (-> a (nd/lo [1 0 0]) (nd/step [nil nil 2]) (seq))))
      (is (= [3 5 6 8 12 14 15 17 21 23 24 26] (-> a (nd/lo [0 1 0]) (nd/step [nil nil 2]) (seq))))
      (is (= [1 4 7 10 13 16 19 22 25] (-> a (nd/lo [0 0 1]) (nd/step [nil nil 2]) (seq))))
      (is (= [18 19 20 21 22 23 24 25 26 9 10 11 12 13 14 15 16 17 0 1 2 3 4 5 6 7 8] (-> a (nd/step [-1 nil nil]) (seq))))
      (is (= [6 7 8 3 4 5 0 1 2 15 16 17 12 13 14 9 10 11 24 25 26 21 22 23 18 19 20] (-> a (nd/step [nil -1 nil]) (seq))))
      (is (= [2 1 0 5 4 3 8 7 6 11 10 9 14 13 12 17 16 15 20 19 18 23 22 21 26 25 24] (-> a (nd/step [nil nil -1]) (seq))))
      ))
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/test/thi/ng/ndarray/test/core.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.ndarray.test.core
    (:require
     [thi.ng.ndarray.core :as nd]
     #?@(:clj
         [[clojure.test :refer :all]]
         :cljs
         [[thi.ng.typedarrays.core :as a]
          [cemerick.cljs.test :as t :refer-macros [is deftest]]])))

  #?(:cljs (enable-console-print!))

  <<test>>

  #?(:cljs
     (if (a/typed-arrays-supported?)
       (t/run-all-tests)
       (prn "Can't test - typed arrays not supported!")))
#+END_SRC
